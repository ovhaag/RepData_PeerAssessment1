cd Rkoans
cd Rkoans
x <- c(1:5)
x
library(swirl)
swirl
info()
main()
nxt()
x <- 45
x
main()
info()
bye()
Sys.setlocale(category = "LC_ALL", locale = "")
Sys.setlocale(category = "LC_TIME", locale = "")
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
xyplot(weight ~ Time | Diet)
summary(Diet)
Diet
BodyWeight
setwd("Documents/SWE/udacity_coursera_edx/datasciencecoursera/RepData_PeerAssessment1/")
getwd()
setwd("Documents/SWE/udacity_coursera_edx/datasciencecoursera/RepData_PeerAssessment1/")
getwd()
setwd("~/Documents/SWE/udacity_coursera_edx/datasciencecoursera/RepData_PeerAssessment1/")
getwd()
setwd("~/Downloads/")
getwd()
setwd("~/Documents/SWE/udacity_coursera_edx/datasciencecoursera/RepData_PeerAssessment1/")
getwd()
setwd("~/Documents/SWE/udacity_coursera_edx/datasciencecoursera/RepData_PeerAssessment1/")
activity <- read.csv("activity.csv")
head(activity)
tail(activity)
?arrange
total.steps <- aggregate(activity$steps, by=list(activity$date), sum)
View(total.steps)
View(total.steps)
hist(total.steps)
?hist
hist(total.steps$steps)
hist(total.steps$x)
names(total.steps) <- c("date", "steps")
hist(total.steps$steps)
hist(total.steps$steps, xlab="Steps per Day")
load("1stInvetigation")
install.packages("knitr")
library("knitr", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
?mean
?opts_chunk
- Median total number of steps taken per day: `r median_steps+1-1`
mean(steps_per_day$steps, na.rm = TRUE)
activity <- read.csv("activity.csv")
steps_per_day <- aggregate(activity$steps, by=list(activity$date), sum)
names(steps_per_day) <- c("date", "steps")
mean_steps <- mean(steps_per_day$steps, na.rm = TRUE)
mean(steps_per_day$steps, na.rm = TRUE)
median(steps_per_day$steps, na.rm = TRUE)
median(steps_per_day$steps, na.rm = TRUE)+1
?plot
head(activity)
plot(x=activity$interval, y=activity$steps, type=l")
q
)
""""
plot(x=activity$interval, y=activity$steps, type=l)
plot(x=activity$interval, y=activity$steps, type="l")
steps_per_interval <- aggregate(activity$steps, by=list(activity$interval), mean)
names(steps_per_interval) <- c("interval", "steps")
head(steps_per_interval)
steps_per_interval <- aggregate(activity$steps, by=list(activity$interval), mean, na.rm = TRUE)
names(steps_per_interval) <- c("interval", "steps")
head(steps_per_interval)
plot(x=steps_per_interval$interval, y=steps_per_interval$steps, type="l")
plot(x=steps_per_interval$interval, y=steps_per_interval$steps, type="l",
xlab="interval")
plot(x=steps_per_interval$interval, y=steps_per_interval$steps, type="l",
xlab="interval", ylab="steps", main="Daily Activity")
m <- max(steps_per_interval$steps)
m
steps_per_interval[steps==m]
steps_per_interval[steps_per_interval$stepss==m]
steps_per_interval$interval[steps_per_interval$stepss==m]
steps_per_interval$interval[steps_per_interval$steps==m]
steps_per_interval[steps_per_interval$steps==m]
plot(x=steps_per_interval$interval, y=steps_per_interval$steps, type="l",
xlab="Interval ID", ylab="Steps", main="Daily Activity")
Date
sys$date
Sys$date
System
system
system(date)
system(time)
sum(is.na(activity$steps))
fixed <- activity
fixed$steps[0] <- 1234
head(fixed)
fixed$steps[1] <- 1234
head(fixed)
head(activity)
fixed$steps[is.na(fixed$steps)] <- 1234
head(activity)
head(fixed)
fixed <- activity
head(fixed)
fixed$steps[is.na(fixed$steps)] <- steps_per_interval$steps[fixed$interval[is.na(fixed$steps)]]
fixed$steps[is.na(fixed$steps)] <- steps_per_interval$steps[steps_per_interval$intrval == fixed$interval[is.na(fixed$steps)]]
for(row in fixed {
if(is.na(row$steps)) {
row$steps <- steps_per_interval[row$interval]$steps
}
}
fixed <- activity
for(row in fixed {
if(is.na(row$steps)) {
row$steps <- steps_per_interval[row$interval]$steps
}
}
for(row in fixed) {
if(is.na(row$steps)) {
row$steps <- steps_per_interval[row$interval]$steps
}
}
proposal <- activity$steps
proposal <- steps_per_interval$steps
proposal <- activity
proposal$steps <- steps_per_interval$steps
View(proposal)
View(proposal)
proposal$steps <- steps_per_interval$steps * is-na(activity$steps)
proposal$steps <- steps_per_interval$steps * is.na(activity$steps)
fixedl$steps <- steps_per_interval$steps * is.na(activity$steps)
fixed$steps <- steps_per_interval$steps * is.na(activity$steps)
head(fixed)
all <- len(activity$steps)
all <- length(activity$steps)
missing <- sum(is.na(activity$steps))
plot(steps_per_interval$steps)
plot(is.na(activity$steps))
plot(is.na(activity$steps)*steps_per_interval$steps)
fixed <- activity
head(fixed)
count <-0
for(item in fixed) {
count <- count + is.na(item[steps])
}
for(item in fixed) {
count <- count + is.na(item$steps)
}
for(item in fixed) {
count <- count + is.na(item[1])
}
count
count <-0
for(item in fixed) {
count <- count + is.na(item[2])
}
count
for(item in fixed) {
count <- count + is.na(item[2])
last <- item
}
last
to_fix <- activity[is.na(activity)]
head(tofix)
head(to_fix)
to_fix[1000]
to_fix[1000:1010]
fixed <- activity
fixed[is.na(fixed)] <- 0
fixed_steps_per_day <- aggregate(fixed$steps, by=list(fixed$date), sum)
names(fixed_steps_per_day) <- c("date", "steps")
hist(fixed_steps_per_day$steps, xlab="Steps per Day", main="Histogram of Steps per Day")
?which
locations <- which(activity$steps == 0)
str(activity)
dates <- activity$date[locations]
steps <- activity$steps[fix_locations]
fix_locations <- which(activity$steps == 0)
steps <- activity$steps[fix_locations]
activity <- read.csv("activity.csv")
fix_locations <- which(is.na(activity$steps)
steps <- activity$steps[fix_locations]
fix_locations <- which(is.na(activity$steps))
steps <- activity$steps[fix_locations]
dates <- activity$date[fix_locations]
fix_steps <- activity$steps[fix_locations]
fix_steps
fix_location <- which(is.na(activity$steps))
fix_steps <- activity$steps[fix_location]
fix_date <- activity$date[fix_location]
fix_interval <- activity$interval[fix_location]
sophfix$steps[fixlocation] <- steps_per_day$steps[which(fix_date==steps_per_day$date)]
sophfix <- activity
sophfix$steps[fixlocation] <- steps_per_day$steps[which(fix_date==steps_per_day$date)]
sophfix$steps[fix_location] <- steps_per_day$steps[which(fix_date==steps_per_day$date)]
tdate <- activity$date[200]
View(activity)
tdate <- activity$date[200:201]
tdate
tdate <- activity$date[200]
tdate
tinterval <- activity$interval[200]
tinterval
fix <- function(date, interval) {
return 0
}
fix <- function(date, interval) {
return(0)
}
fix(1,2)
fix(tdate, tinterval)
steps_per_interval$interval[wich(steps_per_interval$interval == tinterval)]
steps_per_interval$interval[which(steps_per_interval$interval == tinterval)]
steps_per_interval$steps[which(steps_per_interval$interval == tinterval)]
fix <- function(date, interval) {
proposal1 <- steps_per_interval$steps[which(steps_per_interval$interval == interval)]
proposal2 <- steps_per_day$steps[which(steps_per_day$date == date)]
return(proposal1)
}
fix(tdate, tinterval)
fix <- function(date, interval) {
proposal1 <- steps_per_interval$steps[which(steps_per_interval$interval == interval)]
proposal2 <- steps_per_day$steps[which(steps_per_day$date == date)]
return(proposal2)
}
fix(tdate, tinterval)
steps_per_day$steps[which(steps_per_day$date == tdate)]
tdate
head(steps_per_day)
tinterval <- activity$interval[20]
tinterval <- activity$interval[4]
tdate <- activity$date[4]
tinterval
tdate
tdate <- steps_per_day$date[4]
tinterval <- steps_per_interval$interval[3]
tdate
tinterval
fix(tdate, tinterval)
head(steps_per_day)
fix <- function(date, interval) {
proposal1 <- steps_per_interval$steps[which(steps_per_interval$interval == interval)]
proposal2 <- steps_per_day$steps[which(steps_per_day$date == date)]
return(sqrt(proposal1 * proposal2))
}
fix(tdate, tinterval)
mean_steps <- mean(steps_per_day$steps, na.rm = TRUE)
median_steps <- median(steps_per_day$steps, na.rm = TRUE)
mean_steps/12
mean_steps/12/24
head(steps_per_day)
fix <- function(date, interval) {
intervals_per_day <- 12 * 24
fix_spi <- steps_per_interval$steps
fix_spi <- fix_spi[is.na(fix_spi$steps)] <- mean_steps / intervals_per_day
fix_spd <- steps_per_day$steps
fix_spd <- fix_spd[is.na(fix_spd$steps)] <- mean_steps
proposal1 <- spi$steps[which(spi$interval == interval)]
proposal2 <- spd$steps[which(spd$date == date)] / intervals_per_day
return(sqrt(proposal1 * proposal2))
}
fix(tdate, tinterval)
fix <- function(date, interval) {
intervals_per_day <- 12 * 24
fix_spi <- steps_per_interval
fix_spi <- fix_spi[is.na(fix_spi$steps)] <- mean_steps / intervals_per_day
fix_spd <- steps_per_day
fix_spd <- fix_spd[is.na(fix_spd$steps)] <- mean_steps
proposal1 <- spi$steps[which(spi$interval == interval)]
proposal2 <- spd$steps[which(spd$date == date)] / intervals_per_day
return(sqrt(proposal1 * proposal2))
}
fix(tdate, tinterval)
fix <- function(date, interval) {
intervals_per_day <- 12 * 24
fix_spi <- steps_per_interval
fix_spi[is.na(fix_spi$steps)] <- mean_steps / intervals_per_day
fix_spd <- steps_per_day
fix_spd[is.na(fix_spd$steps)] <- mean_steps
proposal1 <- fix_spi$steps[which(fix_spi$interval == interval)]
proposal2 <- fix_spd$steps[which(fix_spd$date == date)] / intervals_per_day
return(sqrt(proposal1 * proposal2))
}
fix(tdate, tinterval)
intervals_per_day <- 12 * 24
fix_spi <- steps_per_interval
fix_spi[is.na(fix_spi$steps)] <- mean_steps / intervals_per_day
fix_spd <- steps_per_day
fix_spd[is.na(fix_spd$steps)] <- mean_steps
proposal1 <- fix_spi$steps[which(fix_spi$interval == interval)]
proposal2 <- fix_spd$steps[which(fix_spd$date == date)] / intervals_per_day
fix_spd <- steps_per_day
fix_spd[is.na(fix_spd$steps)] <- mean_steps
fix_spd <- steps_per_day
fix_spd[is.na(fix_spd$steps)] <- mean_steps
intervals_per_day <- 12 * 24
fix_spi <- steps_per_interval
fix_spi[is.na(fix_spi)] <- mean_steps / intervals_per_day
fix_spd <- steps_per_day
fix_spd[is.na(fix_spd)] <- mean_steps
proposal1 <- fix_spi$steps[which(fix_spi$interval == interval)]
fix <- function(date, interval) {
intervals_per_day <- 12 * 24
fix_spi <- steps_per_interval
fix_spi[is.na(fix_spi)] <- mean_steps / intervals_per_day
fix_spd <- steps_per_day
fix_spd[is.na(fix_spd)] <- mean_steps
proposal1 <- fix_spi$steps[which(fix_spi$interval == interval)]
proposal2 <- fix_spd$steps[which(fix_spd$date == date)] / intervals_per_day
return(sqrt(proposal1 * proposal2))
}
fix(tdate, tinterval)
sophfix <- activity
